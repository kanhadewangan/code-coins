{
  "questions": [
    {
      "title": "Two Sum",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "language": "JAVASCRIPT",
      "difficulty": "EASY",
      "code": "function twoSum(nums, target) {\n    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        map.set(nums[i], i);\n    }\n    return [];\n}"
    },
    {
      "title": "Reverse Linked List",
      "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
      "language": "PYTHON",
      "difficulty": "EASY",
      "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head):\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev",
      "userId": "user456",
      "tags": [
        "linked-list",
        "recursion"
      ],
      "testcases": [
        "{\"input\": [1,2,3,4,5], \"expected\": [5,4,3,2,1]}",
        "{\"input\": [1,2], \"expected\": [2,1]}",
        "{\"input\": [], \"expected\": []}"
      ]
    },
    {
      "title": "Valid Parentheses",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.",
      "language": "JAVA",
      "difficulty": "EASY",
      "code": "import java.util.Stack;\n\npublic class Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) return false;\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}",
      "userId": "user789",
      "tags": [
        "string",
        "stack"
      ],
      "testcases": [
        "{\"input\": \"()\", \"expected\": true}",
        "{\"input\": \"()[]{}\", \"expected\": true}",
        "{\"input\": \"(]\", \"expected\": false}",
        "{\"input\": \"([)]\", \"expected\": false}"
      ]
    },
    {
      "title": "Maximum Subarray",
      "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
      "language": "CPP",
      "difficulty": "MEDIUM",
      "code": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int maxSum = nums[0];\n        int currentSum = nums[0];\n        \n        for (int i = 1; i < nums.size(); i++) {\n            currentSum = max(nums[i], currentSum + nums[i]);\n            maxSum = max(maxSum, currentSum);\n        }\n        \n        return maxSum;\n    }\n};",
      "userId": "user101",
      "tags": [
        "array",
        "dynamic-programming"
      ],
      "testcases": [
        "{\"input\": [-2,1,-3,4,-1,2,1,-5,4], \"expected\": 6}",
        "{\"input\": [1], \"expected\": 1}",
        "{\"input\": [5,4,-1,7,8], \"expected\": 23}"
      ]
    },
    {
      "title": "Climbing Stairs",
      "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
      "language": "PYTHON",
      "difficulty": "EASY",
      "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        if n <= 2:\n            return n\n        \n        first = 1\n        second = 2\n        \n        for i in range(3, n + 1):\n            third = first + second\n            first = second\n            second = third\n        \n        return second",
      "userId": "user202",
      "tags": [
        "dynamic-programming",
        "math"
      ],
      "testcases": [
        "{\"input\": 2, \"expected\": 2}",
        "{\"input\": 3, \"expected\": 3}",
        "{\"input\": 4, \"expected\": 5}"
      ]
    },
    {
      "title": "Binary Tree Inorder Traversal",
      "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
      "language": "JAVASCRIPT",
      "difficulty": "EASY",
      "code": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction inorderTraversal(root) {\n    const result = [];\n    \n    function inorder(node) {\n        if (node === null) return;\n        \n        inorder(node.left);\n        result.push(node.val);\n        inorder(node.right);\n    }\n    \n    inorder(root);\n    return result;\n}",
      "userId": "user303",
      "tags": [
        "tree",
        "depth-first-search",
        "binary-tree"
      ],
      "testcases": [
        "{\"input\": [1,null,2,3], \"expected\": [1,3,2]}",
        "{\"input\": [], \"expected\": []}",
        "{\"input\": [1], \"expected\": [1]}"
      ]
    },
    {
      "title": "Merge Two Sorted Lists",
      "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.",
      "language": "C",
      "difficulty": "EASY",
      "code": "#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    \n    while (list1 && list2) {\n        if (list1->val <= list2->val) {\n            tail->next = list1;\n            list1 = list1->next;\n        } else {\n            tail->next = list2;\n            list2 = list2->next;\n        }\n        tail = tail->next;\n    }\n    \n    tail->next = list1 ? list1 : list2;\n    return dummy.next;\n}",
      "userId": "user404",
      "tags": [
        "linked-list",
        "recursion"
      ],
      "testcases": [
        "{\"input\": [[1,2,4],[1,3,4]], \"expected\": [1,1,2,3,4,4]}",
        "{\"input\": [[],[], \"expected\": []}",
        "{\"input\": [[],[0]], \"expected\": [0]}"
      ]
    },
    {
      "title": "Container With Most Water",
      "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container that contains the most water.",
      "language": "RUST",
      "difficulty": "MEDIUM",
      "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        let mut left = 0;\n        let mut right = height.len() - 1;\n        let mut max_water = 0;\n        \n        while left < right {\n            let width = (right - left) as i32;\n            let current_height = height[left].min(height[right]);\n            let current_water = width * current_height;\n            max_water = max_water.max(current_water);\n            \n            if height[left] < height[right] {\n                left += 1;\n            } else {\n                right -= 1;\n            }\n        }\n        \n        max_water\n    }\n}",
      "userId": "user505",
      "tags": [
        "array",
        "two-pointers"
      ],
      "testcases": [
        "{\"input\": [1,8,6,2,5,4,8,3,7], \"expected\": 49}",
        "{\"input\": [1,1], \"expected\": 1}",
        "{\"input\": [4,3,2,1,4], \"expected\": 16}"
      ]
    },
    {
      "title": "Longest Palindromic Substring",
      "description": "Given a string s, return the longest palindromic substring in s.",
      "language": "GO",
      "difficulty": "MEDIUM",
      "code": "package main\n\nfunc longestPalindrome(s string) string {\n    if len(s) <= 1 {\n        return s\n    }\n    \n    start := 0\n    maxLen := 1\n    \n    for i := 0; i < len(s); i++ {\n        // Check for odd length palindromes\n        left, right := i, i\n        for left >= 0 && right < len(s) && s[left] == s[right] {\n            if right-left+1 > maxLen {\n                start = left\n                maxLen = right - left + 1\n            }\n            left--\n            right++\n        }\n        \n        // Check for even length palindromes\n        left, right = i, i+1\n        for left >= 0 && right < len(s) && s[left] == s[right] {\n            if right-left+1 > maxLen {\n                start = left\n                maxLen = right - left + 1\n            }\n            left--\n            right++\n        }\n    }\n    \n    return s[start : start+maxLen]\n}",
      "userId": "user606",
      "tags": [
        "string",
        "dynamic-programming"
      ],
      "testcases": [
        "{\"input\": \"babad\", \"expected\": \"bab\"}",
        "{\"input\": \"cbbd\", \"expected\": \"bb\"}",
        "{\"input\": \"a\", \"expected\": \"a\"}"
      ]
    },
    {
      "title": "3Sum",
      "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
      "language": "TYPESCRIPT",
      "difficulty": "MEDIUM",
      "code": "function threeSum(nums: number[]): number[][] {\n    const result: number[][] = [];\n    nums.sort((a, b) => a - b);\n    \n    for (let i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        let left = i + 1;\n        let right = nums.length - 1;\n        \n        while (left < right) {\n            const sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum === 0) {\n                result.push([nums[i], nums[left], nums[right]]);\n                \n                while (left < right && nums[left] === nums[left + 1]) left++;\n                while (left < right && nums[right] === nums[right - 1]) right--;\n                \n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}",
      "userId": "user707",
      "tags": [
        "array",
        "two-pointers",
        "sorting"
      ],
      "testcases": [
        "{\"input\": [-1,0,1,2,-1,-4], \"expected\": [[-1,-1,2],[-1,0,1]]}",
        "{\"input\": [0,1,1], \"expected\": []}",
        "{\"input\": [0,0,0], \"expected\": [[0,0,0]]}"
      ]
    }
  ],
  "users": [
    {
      "name": "John Doe",
      "email": "john.doe@example.com",
      "password": "hashed_password_123"
    },
    {
      "name": "Jane Smith",
      "email": "jane.smith@example.com",
      "password": "hashed_password_456"
    },
    {
      "name": "Bob Johnson",
      "email": "bob.johnson@example.com",
      "password": "hashed_password_789"
    },
    {
      "name": "Alice Brown",
      "email": "alice.brown@example.com",
      "password": "hashed_password_101"
    },
    {
      "name": "Charlie Wilson",
      "email": "charlie.wilson@example.com",
      "password": "hashed_password_202"
    }
  ],
  "submissions": [
    {
      "problemId": "problem_1",
      "userId": "user123",
      "code": "function twoSum(nums, target) { /* solution */ }",
      "language": "JAVASCRIPT"
    },
    {
      "problemId": "problem_2",
      "userId": "user456",
      "code": "def reverseList(self, head): # solution",
      "language": "PYTHON"
    },
    {
      "problemId": "problem_3",
      "userId": "user789",
      "code": "public boolean isValid(String s) { /* solution */ }",
      "language": "JAVA"
    }
  ]
}